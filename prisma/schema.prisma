// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  customers     Customer[]
  products      Product[]
  orders        Order[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String?  @unique
  phone       String?
  address     String?
  city        String?
  country     String?
  postalCode  String?  @map("postal_code")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  orders      Order[]

  @@map("customers")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  parentId    String?  @map("parent_id")
  imageUrl    String?  @map("image_url")
  icon        String?
  color       String?
  sortOrder   Int      @default(0) @map("sort_order")
  isFeatured  Boolean  @default(false) @map("is_featured")
  isActive    Boolean  @default(true) @map("is_active")
  seoTitle    String?  @map("seo_title")
  seoDescription String? @map("seo_description")
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Brand {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logoUrl     String?  @map("logo_url")
  website     String?
  isActive    Boolean  @default(true) @map("is_active")
  metadata    Json     @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("brands")
}

model Product {
  id                    String    @id @default(cuid())
  sku                   String    @unique
  title                 String
  slug                  String    @unique
  description           String?
  shortDescription      String?   @map("short_description")
  priceCents            Int       @map("price_cents")
  compareAtPriceCents   Int?      @map("compare_at_price_cents")
  costCents             Int?      @map("cost_cents")
  currency              String    @default("USD")
  categoryId            String?   @map("category_id")
  brandId               String?   @map("brand_id")
  images                String[]
  thumbnail             String?
  gallery               Json      @default("[]")
  attributes            Json      @default("{}")
  tags                  String[]
  stock                 Int       @default(0)
  trackQuantity         Boolean   @default(true) @map("track_quantity")
  allowBackorder        Boolean   @default(false) @map("allow_backorder")
  requiresShipping      Boolean   @default(true) @map("requires_shipping")
  weightGrams           Int?      @map("weight_grams")
  dimensions            Json?
  isActive              Boolean   @default(true) @map("is_active")
  isFeatured            Boolean   @default(false) @map("is_featured")
  seoTitle              String?   @map("seo_title")
  seoDescription        String?   @map("seo_description")
  ratingAverage         Decimal?  @map("rating_average")
  ratingCount           Int       @default(0) @map("rating_count")
  viewCount             Int       @default(0) @map("view_count")
  sortOrder             Int       @default(0) @map("sort_order")
  metadata              Json      @default("{}")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  category              Category? @relation(fields: [categoryId], references: [id])
  brand                 Brand?    @relation(fields: [brandId], references: [id])

  @@map("products")
}

model ProductVariant {
  id                    String   @id @default(cuid())
  productId             String   @map("product_id")
  title                 String
  sku                   String   @unique
  barcode               String?
  priceCents            Int      @map("price_cents")
  compareAtPriceCents   Int?     @map("compare_at_price_cents")
  costCents             Int?     @map("cost_cents")
  stock                 Int      @default(0)
  trackQuantity         Boolean  @default(true) @map("track_quantity")
  allowBackorder        Boolean  @default(false) @map("allow_backorder")
  weightGrams           Int?     @map("weight_grams")
  dimensions            Json?
  imageUrl              String?  @map("image_url")
  attributes            Json     @default("{}")
  sortOrder             Int      @default(0) @map("sort_order")
  isActive              Boolean  @default(true) @map("is_active")
  createdAt             DateTime @default(now()) @map("created_at")
  product               Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Order {
  id           String      @id @default(cuid())
  orderNumber  String      @unique @map("order_number")
  customerId   String      @map("customer_id")
  userId       String      @map("user_id")
  status       OrderStatus @default(PENDING)
  total        Decimal     @db.Decimal(10, 2)
  notes        String?
  orderDate    DateTime    @default(now()) @map("order_date")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  customer     Customer    @relation(fields: [customerId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String   @map("order_id")
  productId  String   @map("product_id")
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}